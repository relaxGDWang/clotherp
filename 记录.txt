可能会有兼容问题
1. 主菜单的展开/隐藏使用的是mouseover/mouseout事件，在移动端的支持性未测试，可能存在隐患
2. hash值更改使用的是location.replace(url)直接重写整个url，并不产生新的历史记录，但不保证移动端对此的支持性，现代浏览器可能更多兼容replaceState的方法（注意，直接location.hash会产生新的历史记录）
3. 由于某些处理放在vue的
接口记录
1. 按布卷编号bolt_no查询布卷（布段）信息列表  PATH.missionCheck=host/examine [GET]
	parameter: bolt_no布卷编号
	return: 
	注意，在返回布卷数量为1的时候，返回值中包含detail详情信息，一般可以直接传递给详情页直接使用
	

B10000112

跟APP协调要点
1. 各页面的访问路径规整
2. 打开详情页面webview的特有方法
3. 关闭（隐藏）详情页面webview的特有方法
4. 重新检验/继续裁剪对应的app方法--实际是打开操作详细webview的方法
5. 声音播放接口

页面访问URL
1. 快速检验 /pageQuick.html#check
2. 快速裁剪 /pageQuick.html#cut
3. 检验任务 /pageMissioncheck.html
4. 操作记录 /pageRecord.html
5. 操作详细页面 /pageOperate.html#{"op":"cut/check",bid:布卷id}
说明
1】快速检验/快速裁剪目前使用的是同一个页面文件，我建议webview也使用同一个，以后缀hash值来区分是裁剪还是检验。
2】操作详细已单独为一个页面，可以安排一个webview与之对应，具体操作哪块布，裁剪还是检验操作，都通过hash值来区分，实际设置webview的时候请把hash值进行URI编码，或者我直接传给你已经编码过的hash字符串
3】为了防止webview页面缓存，为了维护webview当前状态，请在url中增加随机参数以应对。具体方法如下，app初始加载某个页面的时候，以“快速检验”为例子，url是pageQuick.html#check，实际使用中请加工为pageQuick.html?v=0.12314123123#check。当原生或者web请求该页面的时候，只要把对应的webview展现即可。以此维护页面的已加载状态。如果页面文件进行了修改更新，webview的展现隐藏无法达到清除缓存的目的，那么请在app顶部导航中新增一个刷新按钮，这个按钮的点击事件中，把当前展现的webview（app需要对当前展现的webview进行记录）url中的v随机参数进行修改，但注意hash要保持不变，即可清除（刷新）当前的webview缓存了。

web-app交互接口
1.【新增】detailsOpen 操作详细页面打开接口  接收参数 hashString（字符串类型），web调用该接口以打开某个布匹的裁剪/检验操作详细页面。app只要把hashString修改webview的url中的hash即可，不要修改v参数，否则会引起页面重新加载。操作记录页面中的“继续裁剪”“重新检验”按钮的触发都会调用这个接口。
2.【新增】detailsClose 操作详细页面关闭接口 接收参数 无，由于操作详细页面中，web端已经在顶部条设计了关闭按钮（也是上述几个页面中目前唯一web页面有关闭按钮的），所以需要app这边开放这个接口。web调用该接口以隐藏操作详细页面的webview，显示之前的webview，所以app这里还需要在显示操作详细页面的时候，把当前打开的webview做个记录，在关闭时候可以再次展现出来。
3.【新增】audioPlay 提示音播放接口，接收参数 无（可预留一个序号值参数，如果不传播放默认提示音，否则播放对应声音，用于以后扩展不同操作的提示音的需要）web调用该接口以播放记米器滚动到裁剪值处的提示声音。
4.【现有，需注意】get_syncstat 获取设备状态（打印机，记米器，网络），保持不变。该接口调用原先用于裁剪页面/检验页面的顶部条显示3者状态的图标。现在由于框架的更改，只有pageRecord.html和pageOperate.html两个页面会定时调用该接口，频率为1秒触发一次，相比之前单一的webview，需要验证处于隐藏状态下的webview，其加载页面中的自动js是否会继续执行。如果是，两个webview页面同时调用该接口是否会冲突，会否影响效率。
5.【现有】 getprint 获取连接的打印机类型 保持不变。用于打印标签时，碰到自动打印机制的，会区分打印机类型以确定自动打印不同张数的标签
6.【现有】 goprint 发送打印信息并打印 保持不变。多张标签纸打印目前是通过web的time轮询机制间隔调用该方法，并不十分靠谱，建议后期可以添加打印张数的参数，由app端实现多张打印。
7.【现有】updatenumbox 获得记米器读数，保持不变
8.【现有】gozero 记米器读数设置为0，保持不变
9.【现有】exitwebview 跳转到app设置主界面，保持不变。目前似乎已无使用场景。
10.【现有】getLoginUser 获取当前登录的用户信息，保持不变
11.【现有】backHome 返回app的首页。保持不变 目前似乎已无使用场景。
12.【现有】jumpUrl 跳转到对应的web页面，保持不变
13.【现有】tokenUpdate 更新token，言下之意是转到app的用户登录界面，保持不变
14.【现有】goTaskList 打开用户任务列表界面，保持不变

其他
1. 关于在操作详细页面上做了修改操作之后，如何刷新其他相关的webview
	目前PC端也暂未实现自动化刷新，而是通过在主菜单中增加刷新菜单，至少让用户可以手工刷新。对于app来说，初步也可以这么实现。
	初步考虑需要扩展操作详细的关闭接口。由web端告知是否需要刷新以及刷新哪个webview。然后在切换显示webview的时候加以应对。

